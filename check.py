import requests
from tqdm import tqdm
from bs4 import BeautifulSoup
import time
import os

scan_results = {
    "headers": [],
    "rate_limiting": None,
    "brute_force": None,
    "file_upload": [],
    "parameter_pollution": None,
    "subdomain_enumeration": [],
    "cors_misconfiguration": None,
    "open_redirect": None
}

XSS_PAYLOADS = [
    "<script>alert('XSS')</script>",
    '"><img src=x onerror=alert(1)>',
    '<svg onload=alert(1)>',
    "<iframe src=javascript:alert(1)>",
]

BRUTE_FORCE_CREDENTIALS = [
    ("admin", "admin"),
    ("admin", "password"),
    ("test", "test"),
    ("root", "toor"),
]

def check_security_headers(url):
    print(f"Testing {url} for common security headers...\n")
    
    headers = [
        "X-Frame-Options",  # Prevent clickjacking
        "X-Content-Type-Options",  # Prevent MIME-sniffing
        "Strict-Transport-Security",  # Force HTTPS
        "Content-Security-Policy",  # Prevent cross-site scripting
        "Referrer-Policy",  # Control information in the referrer header
        "Permissions-Policy"  # Restrict the browser features your site can use
    ]

    try:
        response = requests.get(url)
        for header in headers:
            if header in response.headers:
                scan_results['headers'].append(f"[+] {header} is present.")
            else:
                scan_results['headers'].append(f"[-] {header} is missing or misconfigured.")
    except requests.exceptions.RequestException as e:
        scan_results['headers'].append(f"Error: Could not connect to {url}. Details: {e}")

def check_rate_limiting(url):
    print(f"\nChecking {url} for rate limiting...\n")

    try:
        for i in range(10):
            response = requests.get(url)
            time.sleep(0.5)

            if response.status_code == 429: 
                scan_results["rate_limiting"] = f"Rate limiting detected after {i+1} requests."
                return
        scan_results["rate_limiting"] = "No rate limiting detected."
    except requests.exceptions.RequestException as e:
        scan_results["rate_limiting"] = f"Error: Could not connect to {url}. Details: {e}"

def brute_force_login(url, login_url):
    print(f"\nPerforming brute force test on {login_url}...\n")

    try:
        for username, password in BRUTE_FORCE_CREDENTIALS:
            payload = {'username': username, 'password': password}
            response = requests.post(login_url, data=payload)

            if "login" not in response.text.lower():
                scan_results['brute_force'] = f"Brute force successful with username: {username} and password: {password}"
                return
        scan_results['brute_force'] = "Brute force attempt failed. No valid credentials found."
    except requests.exceptions.RequestException as e:
        scan_results['brute_force'] = f"Error: Could not connect to {login_url}. Details: {e}"

def test_file_upload_vulnerability(url):
    print(f"\nTesting {url} for file upload vulnerabilities...\n")

    files_to_test = {
        'shell.php': ('shell.php', '<?php echo "Vulnerable"; ?>'),
        'test.exe': ('test.exe', 'This is a test executable')
    }

    try:
        for file_name, file_content in files_to_test.items():
            files = {'file': (file_name, file_content[1], 'application/octet-stream')}
            response = requests.post(url, files=files)

            if "file uploaded" in response.text.lower() or "success" in response.text.lower():
                scan_results['file_upload'].append(f"File upload successful with {file_name}.")
            else:
                scan_results['file_upload'].append(f"File upload failed for {file_name}.")
    except requests.exceptions.RequestException as e:
        scan_results['file_upload'].append(f"Error: Could not connect to {url}. Details: {e}")

def test_http_parameter_pollution(url):
    print(f"\nTesting {url} for HTTP Parameter Pollution...\n")

    params = {'param': 'value1', 'param': 'value2'}
    try:
        response = requests.get(url, params=params)

        if "value1" in response.text and "value2" in response.text:
            scan_results['parameter_pollution'] = "HTTP Parameter Pollution detected."
        else:
            scan_results['parameter_pollution'] = "No HTTP Parameter Pollution detected."
    except requests.exceptions.RequestException as e:
        scan_results['parameter_pollution'] = f"Error: Could not connect to {url}. Details: {e}"

def check_cors_misconfiguration(url):
    print(f"\nChecking for CORS misconfiguration at {url}...\n")

    headers = {'Origin': 'http://malicious.com'}
    try:
        response = requests.options(url, headers=headers)

        if "Access-Control-Allow-Origin" in response.headers and response.headers['Access-Control-Allow-Origin'] == '*':
            scan_results['cors_misconfiguration'] = f"CORS misconfiguration detected: Wildcard (*) allowed for any origin."
        else:
            scan_results['cors_misconfiguration'] = "CORS configuration seems secure."
    except requests.exceptions.RequestException as e:
        scan_results['cors_misconfiguration'] = f"Error: Could not connect to {url}. Details: {e}"

def check_open_redirect(url):
    print(f"\nChecking {url} for open redirect vulnerabilities...\n")

    try:
        response = requests.get(url, params={'redirect': 'http://malicious.com'})
        
        if "http://malicious.com" in response.headers.get('Location', ''):
            scan_results['open_redirect'] = f"Open redirect detected: Redirects to external malicious URL."
        else:
            scan_results['open_redirect'] = "No open redirect vulnerability detected."
    except requests.exceptions.RequestException as e:
        scan_results['open_redirect'] = f"Error: Could not connect to {url}. Details: {e}"

def enumerate_subdomains(domain):
    print(f"\nEnumerating subdomains for {domain}...\n")

    subdomains = ["www", "blog", "mail", "test", "dev", "api", "admin"]

    try:
        for subdomain in tqdm(subdomains, desc="Checking subdomains", unit="subdomain"):
            subdomain_url = f"http://{subdomain}.{domain}"

            try:
                response = requests.get(subdomain_url)
                if response.status_code == 200:
                    scan_results['subdomain_enumeration'].append(f"Subdomain found: {subdomain_url}")
            except requests.exceptions.RequestException:
                pass
    except Exception as e:
        scan_results['subdomain_enumeration'].append(f"Error: Could not enumerate subdomains. Details: {e}")

def generate_report(output_file=None):
    html_report = """
    <html>
    <head>
        <title>Security Scan Report</title>
        <style>
            body {font-family: Arial, sans-serif; margin: 20px;}
            h1 {color: #2c3e50;}
            h2 {color: #16a085;}
            table {width: 100%; border-collapse: collapse; margin-top: 20px;}
            th, td {border: 1px solid #ddd; padding: 8px; text-align: left;}
            th {background-color: #f4f6f6; color: #333;}
            tr:nth-child(even) {background-color: #f9f9f9;}
            tr:hover {background-color: #f1f1f1;}
            .section-title {background-color: #34495e; color: white; padding: 10px;}
        </style>
    </head>
    <body>
        <h1>Security Scan Report</h1>
        <h2 class="section-title">Summary</h2>
    """
    
    html_report += "<h2>Security Headers</h2><table><tr><th>Header</th><th>Status</th></tr>"
    for header in scan_results['headers']:
        html_report += f"<tr><td>{header.split(':')[0]}</td><td>{header}</td></tr>"
    html_report += "</table>"
    
    html_report += f"<h2>Rate Limiting</h2><p>{scan_results['rate_limiting']}</p>"

    html_report += f"<h2>Brute Force Login Check</h2><p>{scan_results['brute_force']}</p>"

    html_report += "<h2>File Upload Vulnerability Check</h2><ul>"
    for result in scan_results['file_upload']:
        html_report += f"<li>{result}</li>"
    html_report += "</ul>"

    html_report += f"<h2>HTTP Parameter Pollution Check</h2><p>{scan_results['parameter_pollution']}</p>"

    html_report += f"<h2>CORS Misconfiguration Check</h2><p>{scan_results['cors_misconfiguration']}</p>"

    html_report += f"<h2>Open Redirect Vulnerability Check</h2><p>{scan_results['open_redirect']}</p>"

    html_report += "<h2>Subdomain Enumeration</h2><ul>"
    for subdomain in scan_results['subdomain_enumeration']:
        html_report += f"<li>{subdomain}</li>"
    html_report += "</ul>"

    html_report += "<h2>End of Report</h2></body></html>"

    if output_file:
        if not output_file.endswith(".html"):
            output_file += ".html"
        
        with open(output_file, 'w') as f:
            f.write(html_report)
        print(f"\nHTML Report saved to {output_file}")

def main():
    url = input("Enter the website URL to test (e.g., https://example.com): ")

    if not url.startswith("http"):
        print("Please enter a valid URL starting with http:// or https://")
        return

    check_security_headers(url)
    check_rate_limiting(url)
    brute_force_login(url, f"{url}/login")
    test_file_upload_vulnerability(f"{url}/upload")
    test_http_parameter_pollution(url)
    check_cors_misconfiguration(url)
    check_open_redirect(url)

    domain = url.replace("https://", "").replace("http://", "").split('/')[0]
    enumerate_subdomains(domain)

    output_file = input("Enter the file name to save the report (or press Enter to skip saving): ")
    generate_report(output_file if output_file else None)

if __name__ == "__main__":
    main()
